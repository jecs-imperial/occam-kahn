'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./graph/edge'),
    Vertex = require('./graph/vertex'),
    arrayUtil = require('./util/array');

var Graph = function () {
  function Graph(topologicallySortedVertices) {
    _classCallCheck(this, Graph);

    this.topologicallySortedVertices = topologicallySortedVertices;
  }

  _createClass(Graph, [{
    key: 'getTopologicallySortedVertices',
    value: function getTopologicallySortedVertices() {
      return this.topologicallySortedVertices;
    }
  }], [{
    key: 'fromVertexLiterals',
    value: function fromVertexLiterals(vertexLiterals) {
      var vertices = [],
          edges = [];

      verticesAndEdgesFromVertexLiterals(vertexLiterals, vertices, edges);

      var topologicallySortedVertices = topologicallySortedVerticesFromVerticesAndEdges(vertices, edges);

      addAncestorVerticesToSortedVertices(topologicallySortedVertices);

      var graph = new Graph(topologicallySortedVertices);

      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function verticesAndEdgesFromVertexLiterals(vertexLiterals, vertices, edges) {
  var vertexMap = {};

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = arrayUtil.first(vertexLiteral),
        secondVertexLiteralElement = arrayUtil.second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    var vertex = void 0;

    var vertexExists = vertexMap.hasOwnProperty(vertexName);

    if (vertexExists) {
      vertex = vertexMap[vertexName];
    } else {
      vertex = Vertex.fromVertexName(vertexName);

      vertexMap[vertexName] = vertex;

      vertices.push(vertex);
    }

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertex = void 0;

      var ancestorVertexExists = vertexMap.hasOwnProperty(ancestorVertexName);

      if (ancestorVertexExists) {
        ancestorVertex = vertexMap[ancestorVertexName];
      } else {
        ancestorVertex = Vertex.fromVertexName(ancestorVertexName);

        vertexMap[ancestorVertexName] = ancestorVertex;

        vertices.push(ancestorVertex);
      }

      var firstVertex = ancestorVertex,
          ///
      secondVertex = vertex,
          ///
      edge = new Edge(firstVertex, secondVertex);

      edges.push(edge);

      var incomingEdge = edge,
          ///
      outgoingEdge = edge; ///

      vertex.addIncomingEdge(incomingEdge);

      ancestorVertex.addOutgoingEdge(outgoingEdge);
    });
  });
}

function topologicallySortedVerticesFromVerticesAndEdges(vertices, edges) {
  var topologicallySortedVertices = [];

  var startingVertices = vertices.filter(function (vertex) {
    var vertexStarting = vertex.isStarting();

    return vertexStarting;
  });

  var startingVerticesLength = startingVertices.length;

  var _loop = function _loop() {
    var startingVertex = startingVertices.pop(),
        topologicallySortedVertex = startingVertex; ///

    topologicallySortedVertices.push(topologicallySortedVertex);

    arrayUtil.backwardsForEach(edges, function (edge, index) {
      var firstVertex = edge.getFirstVertex(),
          edgeStarting = firstVertex === startingVertex;

      if (edgeStarting) {
        edges.splice(index, 1);

        var lastVertex = edge.getLastVertex(),
            incomingEdge = edge; ///

        lastVertex.removeIncomingEdge(incomingEdge);

        var lastVertexStarting = lastVertex.isStarting();

        if (lastVertexStarting) {
          startingVertices.push(lastVertex);
        }
      }
    });

    startingVerticesLength = startingVertices.length;
  };

  while (startingVerticesLength > 0) {
    _loop();
  }

  var edgesLength = edges.length;

  if (edgesLength > 0) {
    topologicallySortedVertices = null;
  }

  return topologicallySortedVertices;
}

function addAncestorVerticesToSortedVertices(topologicallySortedVertices) {
  if (topologicallySortedVertices !== null) {
    topologicallySortedVertices.forEach(function (topologicallySortedVertex) {
      topologicallySortedVertex.forEachOutgoingEdge(function (outgoingEdge) {
        var outgoingEdgeLastVertex = outgoingEdge.getLastVertex(),
            descendantVertex = outgoingEdgeLastVertex,
            ///
        ancestorVertex = topologicallySortedVertex; ///

        descendantVertex.addAncestorVertex(ancestorVertex);
      });
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9ncmFwaC5qcyJdLCJuYW1lcyI6WyJFZGdlIiwicmVxdWlyZSIsIlZlcnRleCIsImFycmF5VXRpbCIsIkdyYXBoIiwidG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzIiwidmVydGV4TGl0ZXJhbHMiLCJ2ZXJ0aWNlcyIsImVkZ2VzIiwidmVydGljZXNBbmRFZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyIsInRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlc0Zyb21WZXJ0aWNlc0FuZEVkZ2VzIiwiYWRkQW5jZXN0b3JWZXJ0aWNlc1RvU29ydGVkVmVydGljZXMiLCJncmFwaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZXJ0ZXhNYXAiLCJmb3JFYWNoIiwidmVydGV4TGl0ZXJhbCIsImZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJmaXJzdCIsInNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50Iiwic2Vjb25kIiwiYW5jZXN0b3JWZXJ0ZXhOYW1lcyIsInZlcnRleE5hbWUiLCJ2ZXJ0ZXgiLCJ2ZXJ0ZXhFeGlzdHMiLCJoYXNPd25Qcm9wZXJ0eSIsImZyb21WZXJ0ZXhOYW1lIiwicHVzaCIsImFuY2VzdG9yVmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4IiwiYW5jZXN0b3JWZXJ0ZXhFeGlzdHMiLCJmaXJzdFZlcnRleCIsInNlY29uZFZlcnRleCIsImVkZ2UiLCJpbmNvbWluZ0VkZ2UiLCJvdXRnb2luZ0VkZ2UiLCJhZGRJbmNvbWluZ0VkZ2UiLCJhZGRPdXRnb2luZ0VkZ2UiLCJzdGFydGluZ1ZlcnRpY2VzIiwiZmlsdGVyIiwidmVydGV4U3RhcnRpbmciLCJpc1N0YXJ0aW5nIiwic3RhcnRpbmdWZXJ0aWNlc0xlbmd0aCIsImxlbmd0aCIsInN0YXJ0aW5nVmVydGV4IiwicG9wIiwidG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRleCIsImJhY2t3YXJkc0ZvckVhY2giLCJpbmRleCIsImdldEZpcnN0VmVydGV4IiwiZWRnZVN0YXJ0aW5nIiwic3BsaWNlIiwibGFzdFZlcnRleCIsImdldExhc3RWZXJ0ZXgiLCJyZW1vdmVJbmNvbWluZ0VkZ2UiLCJsYXN0VmVydGV4U3RhcnRpbmciLCJlZGdlc0xlbmd0aCIsImZvckVhY2hPdXRnb2luZ0VkZ2UiLCJvdXRnb2luZ0VkZ2VMYXN0VmVydGV4IiwiZGVzY2VuZGFudFZlcnRleCIsImFkZEFuY2VzdG9yVmVydGV4Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsT0FBT0MsUUFBUSxjQUFSLENBQWI7QUFBQSxJQUNNQyxTQUFTRCxRQUFRLGdCQUFSLENBRGY7QUFBQSxJQUVNRSxZQUFZRixRQUFRLGNBQVIsQ0FGbEI7O0lBSU1HLEs7QUFDSixpQkFBYUMsMkJBQWIsRUFBMEM7QUFBQTs7QUFDeEMsU0FBS0EsMkJBQUwsR0FBbUNBLDJCQUFuQztBQUNEOzs7O3FEQUVnQztBQUMvQixhQUFPLEtBQUtBLDJCQUFaO0FBQ0Q7Ozt1Q0FFeUJDLGMsRUFBZ0I7QUFDeEMsVUFBTUMsV0FBVyxFQUFqQjtBQUFBLFVBQ01DLFFBQVEsRUFEZDs7QUFHQUMseUNBQW1DSCxjQUFuQyxFQUFtREMsUUFBbkQsRUFBNkRDLEtBQTdEOztBQUVBLFVBQU1ILDhCQUE4QkssZ0RBQWdESCxRQUFoRCxFQUEwREMsS0FBMUQsQ0FBcEM7O0FBRUFHLDBDQUFvQ04sMkJBQXBDOztBQUVBLFVBQU1PLFFBQVEsSUFBSVIsS0FBSixDQUFVQywyQkFBVixDQUFkOztBQUVBLGFBQU9PLEtBQVA7QUFDRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJWLEtBQWpCOztBQUVBLFNBQVNLLGtDQUFULENBQTRDSCxjQUE1QyxFQUE0REMsUUFBNUQsRUFBc0VDLEtBQXRFLEVBQTZFO0FBQzNFLE1BQU1PLFlBQVksRUFBbEI7O0FBRUFULGlCQUFlVSxPQUFmLENBQXVCLFVBQVNDLGFBQVQsRUFBd0I7QUFDN0MsUUFBTUMsNEJBQTRCZixVQUFVZ0IsS0FBVixDQUFnQkYsYUFBaEIsQ0FBbEM7QUFBQSxRQUNNRyw2QkFBNkJqQixVQUFVa0Is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RCx5QkFBeUIsQ0FBaEMsRUFBbUM7QUFBQTtBQTJCbEM7O0FBRUQsTUFBTWMsY0FBY2pELE1BQU1vQyxNQUExQjs7QUFFQSxNQUFJYSxjQUFjLENBQWxCLEVBQXFCO0FBQ25CcEQsa0NBQThCLElBQTlCO0FBQ0Q7O0FBRUQsU0FBT0EsMkJBQVA7QUFDRDs7QUFFRCxTQUFTTSxtQ0FBVCxDQUE2Q04sMkJBQTdDLEVBQTBFO0FBQ3hFLE1BQUlBLGdDQUFnQyxJQUFwQyxFQUEwQztBQUN4Q0EsZ0NBQTRCVyxPQUE1QixDQUFvQyxVQUFTK0IseUJBQVQsRUFBb0M7QUFDdEVBLGdDQUEwQlcsbUJBQTFCLENBQThDLFVBQVN0QixZQUFULEVBQXVCO0FBQ25FLFlBQU11Qix5QkFBeUJ2QixhQUFha0IsYUFBYixFQUEvQjtBQUFBLFlBQ01NLG1CQUFtQkQsc0JBRHpCO0FBQUEsWUFDa0Q7QUFDNUM3Qix5QkFBaUJpQix5QkFGdkIsQ0FEbUUsQ0FHaEI7O0FBRW5EYSx5QkFBaUJDLGlCQUFqQixDQUFtQy9CLGNBQW5DO0FBQ0QsT0FORDtBQU9ELEtBUkQ7QUFTRDtBQUNGIiwiZmlsZSI6ImdyYXBoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFZGdlID0gcmVxdWlyZSgnLi9ncmFwaC9lZGdlJyksXG4gICAgICBWZXJ0ZXggPSByZXF1aXJlKCcuL2dyYXBoL3ZlcnRleCcpLFxuICAgICAgYXJyYXlVdGlsID0gcmVxdWlyZSgnLi91dGlsL2FycmF5Jyk7XG5cbmNsYXNzIEdyYXBoIHtcbiAgY29uc3RydWN0b3IgKHRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlcykge1xuICAgIHRoaXMudG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzID0gdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzO1xuICB9XG5cbiAgZ2V0VG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlcztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmVydGV4TGl0ZXJhbHModmVydGV4TGl0ZXJhbHMpIHtcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdLFxuICAgICAgICAgIGVkZ2VzID0gW107XG5cbiAgICB2ZXJ0aWNlc0FuZEVkZ2VzRnJvbVZlcnRleExpdGVyYWxzKHZlcnRleExpdGVyYWxzLCB2ZXJ0aWNlcywgZWRnZXMpO1xuXG4gICAgY29uc3QgdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzID0gdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzRnJvbVZlcnRpY2VzQW5kRWRnZXModmVydGljZXMsIGVkZ2VzKTtcbiAgICBcbiAgICBhZGRBbmNlc3RvclZlcnRpY2VzVG9Tb3J0ZWRWZXJ0aWNlcyh0b3BvbG9naWNhbGx5U29ydGVkVmVydGljZXMpO1xuICAgIFxuICAgIGNvbnN0IGdyYXBoID0gbmV3IEdyYXBoKHRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlcyk7XG4gICAgXG4gICAgcmV0dXJuIGdyYXBoO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGg7XG5cbmZ1bmN0aW9uIHZlcnRpY2VzQW5kRWRnZXNGcm9tVmVydGV4TGl0ZXJhbHModmVydGV4TGl0ZXJhbHMsIHZlcnRpY2VzLCBlZGdlcykge1xuICBjb25zdCB2ZXJ0ZXhNYXAgPSB7fTtcblxuICB2ZXJ0ZXhMaXRlcmFscy5mb3JFYWNoKGZ1bmN0aW9uKHZlcnRleExpdGVyYWwpIHtcbiAgICBjb25zdCBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50ID0gYXJyYXlVdGlsLmZpcnN0KHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIHNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50ID0gYXJyYXlVdGlsLnNlY29uZCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBhbmNlc3RvclZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQsIC8vL1xuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50OyAvLy9cblxuICAgIGxldCB2ZXJ0ZXg7XG5cbiAgICBjb25zdCB2ZXJ0ZXhFeGlzdHMgPSB2ZXJ0ZXhNYXAuaGFzT3duUHJvcGVydHkodmVydGV4TmFtZSk7XG5cbiAgICBpZiAodmVydGV4RXhpc3RzKSB7XG4gICAgICB2ZXJ0ZXggPSB2ZXJ0ZXhNYXBbdmVydGV4TmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlcnRleCA9IFZlcnRleC5mcm9tVmVydGV4TmFtZSh2ZXJ0ZXhOYW1lKTtcblxuICAgICAgdmVydGV4TWFwW3ZlcnRleE5hbWVdID0gdmVydGV4O1xuXG4gICAgICB2ZXJ0aWNlcy5wdXNoKHZlcnRleCk7XG4gICAgfVxuXG4gICAgYW5jZXN0b3JWZXJ0ZXhOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGFuY2VzdG9yVmVydGV4TmFtZSkge1xuICAgICAgbGV0IGFuY2VzdG9yVmVydGV4O1xuXG4gICAgICBjb25zdCBhbmNlc3RvclZlcnRleEV4aXN0cyA9IHZlcnRleE1hcC5oYXNPd25Qcm9wZXJ0eShhbmNlc3RvclZlcnRleE5hbWUpO1xuXG4gICAgICBpZiAoYW5jZXN0b3JWZXJ0ZXhFeGlzdHMpIHtcbiAgICAgICAgYW5jZXN0b3JWZXJ0ZXggPSB2ZXJ0ZXhNYXBbYW5jZXN0b3JWZXJ0ZXhOYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuY2VzdG9yVmVydGV4ID0gVmVydGV4LmZyb21WZXJ0ZXhOYW1lKGFuY2VzdG9yVmVydGV4TmFtZSk7XG5cbiAgICAgICAgdmVydGV4TWFwW2FuY2VzdG9yVmVydGV4TmFtZV0gPSBhbmNlc3RvclZlcnRleDtcblxuICAgICAgICB2ZXJ0aWNlcy5wdXNoKGFuY2VzdG9yVmVydGV4KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlyc3RWZXJ0ZXggPSBhbmNlc3RvclZlcnRleCwgLy8vXG4gICAgICAgICAgICBzZWNvbmRWZXJ0ZXggPSB2ZXJ0ZXgsICAvLy9cbiAgICAgICAgICAgIGVkZ2UgPSBuZXcgRWRnZShmaXJzdFZlcnRleCwgc2Vjb25kVmVydGV4KTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcblxuICAgICAgY29uc3QgaW5jb21pbmdFZGdlID0gZWRnZSwgIC8vL1xuICAgICAgICAgICAgb3V0Z29pbmdFZGdlID0gZWRnZTsgIC8vL1xuXG4gICAgICB2ZXJ0ZXguYWRkSW5jb21pbmdFZGdlKGluY29taW5nRWRnZSk7XG5cbiAgICAgIGFuY2VzdG9yVmVydGV4LmFkZE91dGdvaW5nRWRnZShvdXRnb2luZ0VkZ2UpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzRnJvbVZlcnRpY2VzQW5kRWRnZXModmVydGljZXMsIGVkZ2VzKSB7XG4gIGxldCB0b3BvbG9naWNhbGx5U29ydGVkVmVydGljZXMgPSBbXTtcbiAgXG4gIGNvbnN0IHN0YXJ0aW5nVmVydGljZXMgPSB2ZXJ0aWNlcy5maWx0ZXIoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgICAgICAgY29uc3QgdmVydGV4U3RhcnRpbmcgPSB2ZXJ0ZXguaXNTdGFydGluZygpO1xuICAgICAgXG4gICAgICAgICAgcmV0dXJuIHZlcnRleFN0YXJ0aW5nO1xuICAgICAgICB9KTtcblxuICBsZXQgc3RhcnRpbmdWZXJ0aWNlc0xlbmd0aCA9IHN0YXJ0aW5nVmVydGljZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChzdGFydGluZ1ZlcnRpY2VzTGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHN0YXJ0aW5nVmVydGV4ID0gc3RhcnRpbmdWZXJ0aWNlcy5wb3AoKSxcbiAgICAgICAgICB0b3BvbG9naWNhbGx5U29ydGVkVmVydGV4ID0gc3RhcnRpbmdWZXJ0ZXg7ICAvLy9cblxuICAgIHRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlcy5wdXNoKHRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0ZXgpO1xuXG4gICAgYXJyYXlVdGlsLmJhY2t3YXJkc0ZvckVhY2goZWRnZXMsIGZ1bmN0aW9uKGVkZ2UsIGluZGV4KSB7XG4gICAgICBjb25zdCBmaXJzdFZlcnRleCA9IGVkZ2UuZ2V0Rmlyc3RWZXJ0ZXgoKSxcbiAgICAgICAgICAgIGVkZ2VTdGFydGluZyA9IChmaXJzdFZlcnRleCA9PT0gc3RhcnRpbmdWZXJ0ZXgpO1xuXG4gICAgICBpZiAoZWRnZVN0YXJ0aW5nKSB7XG4gICAgICAgIGVkZ2VzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgICAgY29uc3QgbGFzdFZlcnRleCA9IGVkZ2UuZ2V0TGFzdFZlcnRleCgpLFxuICAgICAgICAgICAgICBpbmNvbWluZ0VkZ2UgPSBlZGdlOyAgLy8vXG5cbiAgICAgICAgbGFzdFZlcnRleC5yZW1vdmVJbmNvbWluZ0VkZ2UoaW5jb21pbmdFZGdlKTtcblxuICAgICAgICBjb25zdCBsYXN0VmVydGV4U3RhcnRpbmcgPSBsYXN0VmVydGV4LmlzU3RhcnRpbmcoKTtcblxuICAgICAgICBpZiAobGFzdFZlcnRleFN0YXJ0aW5nKSB7XG4gICAgICAgICAgc3RhcnRpbmdWZXJ0aWNlcy5wdXNoKGxhc3RWZXJ0ZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFydGluZ1ZlcnRpY2VzTGVuZ3RoID0gc3RhcnRpbmdWZXJ0aWNlcy5sZW5ndGg7XG4gIH1cblxuICBjb25zdCBlZGdlc0xlbmd0aCA9IGVkZ2VzLmxlbmd0aDtcblxuICBpZiAoZWRnZXNMZW5ndGggPiAwKSB7XG4gICAgdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0b3BvbG9naWNhbGx5U29ydGVkVmVydGljZXM7XG59XG5cbmZ1bmN0aW9uIGFkZEFuY2VzdG9yVmVydGljZXNUb1NvcnRlZFZlcnRpY2VzKHRvcG9sb2dpY2FsbHlTb3J0ZWRWZXJ0aWNlcykge1xuICBpZiAodG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzICE9PSBudWxsKSB7XG4gICAgdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRpY2VzLmZvckVhY2goZnVuY3Rpb24odG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRleCkge1xuICAgICAgdG9wb2xvZ2ljYWxseVNvcnRlZFZlcnRleC5mb3JFYWNoT3V0Z29pbmdFZGdlKGZ1bmN0aW9uKG91dGdvaW5nRWRnZSkge1xuICAgICAgICBjb25zdCBvdXRnb2luZ0VkZ2VMYXN0VmVydGV4ID0gb3V0Z29pbmdFZGdlLmdldExhc3RWZXJ0ZXgoKSxcbiAgICAgICAgICAgICAgZGVzY2VuZGFudFZlcnRleCA9IG91dGdvaW5nRWRnZUxhc3RWZXJ0ZXgsICAvLy9cbiAgICAgICAgICAgICAgYW5jZXN0b3JWZXJ0ZXggPSB0b3BvbG9naWNhbGx5U29ydGVkVmVydGV4OyAgLy8vXG5cbiAgICAgICAgZGVzY2VuZGFudFZlcnRleC5hZGRBbmNlc3RvclZlcnRleChhbmNlc3RvclZlcnRleCk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG59XG4iXX0=