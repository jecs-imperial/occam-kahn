'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./graph/edge'),
    Vertex = require('./graph/vertex'),
    arrayUtil = require('./util/array');

var Graph = function () {
  function Graph(topologicallySortedVertices, remainingEdges) {
    _classCallCheck(this, Graph);

    this.topologicallySortedVertices = topologicallySortedVertices;
    this.remainingEdges = remainingEdges;
  }

  _createClass(Graph, [{
    key: 'getTopologicallySortedVertices',
    value: function getTopologicallySortedVertices() {
      return this.topologicallySortedVertices;
    }
  }, {
    key: 'getRemainingEdges',
    value: function getRemainingEdges() {
      return this.remainingEdges;
    }
  }], [{
    key: 'fromVertexLiterals',
    value: function fromVertexLiterals(vertexLiterals) {
      var vertexMap = vertexMapFromVertexLiterals(vertexLiterals),
          edges = edgesFromVertexLiteralsAndVertexMap(vertexLiterals, vertexMap),
          topologicallySortedVertices = topologicallySortedVerticesFromVertexMapAndEdges(vertexMap, edges),
          remainingEdges = edges,
          ///
      graph = new Graph(topologicallySortedVertices, remainingEdges);

      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function vertexMapFromVertexLiterals(vertexLiterals) {
  var vertexMap = {};

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = arrayUtil.first(vertexLiteral),
        vertexName = firstVertexLiteralElement,
        ///
    vertexExists = vertexMap.hasOwnProperty(vertexName);

    if (!vertexExists) {
      var vertex = Vertex.fromVertexName(vertexName);

      vertexMap[vertexName] = vertex;
    }

    var secondVertexLiteralElement = arrayUtil.second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertexExists = vertexMap.hasOwnProperty(ancestorVertexName);

      if (!ancestorVertexExists) {
        var ancestorVertex = Vertex.fromVertexName(ancestorVertexName);

        vertexMap[ancestorVertexName] = ancestorVertex;
      }
    });
  });

  return vertexMap;
}

function edgesFromVertexLiteralsAndVertexMap(vertexLiterals, vertexMap) {
  var edges = [];

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = arrayUtil.first(vertexLiteral),
        secondVertexLiteralElement = arrayUtil.second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement,
        ///
    vertex = vertexMap[vertexName];

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertex = vertexMap[ancestorVertexName],
          sourceVertex = ancestorVertex,
          ///
      targetVertex = vertex,
          ///
      edge = new Edge(sourceVertex, targetVertex),
          incomingEdge = edge,
          ///
      outgoingEdge = edge; ///

      edges.push(edge);

      vertex.addIncomingEdge(incomingEdge);

      ancestorVertex.addOutgoingEdge(outgoingEdge);
    });
  });

  return edges;
}

function topologicallySortedVerticesFromVertexMapAndEdges(vertexMap, edges) {
  var topologicallySortedVertices = [];

  var startingVertices = startingVerticesFromVertexMap(vertexMap);

  var startingVerticesLength = startingVertices.length;

  var _loop = function _loop() {
    var startingVertex = startingVertices.pop(),
        topologicallySortedVertex = startingVertex; ///

    topologicallySortedVertices.push(topologicallySortedVertex);

    arrayUtil.backwardsForEach(edges, function (edge, index) {
      var sourceVertex = edge.getSourceVertex(),
          edgeStarting = sourceVertex === startingVertex; ///

      if (edgeStarting) {
        edges.splice(index, 1);

        var targetVertex = edge.getTargetVertex(),
            incomingEdge = edge; ///

        targetVertex.removeIncomingEdge(incomingEdge);

        var targetVertexStarting = targetVertex.isStarting();

        if (targetVertexStarting) {
          var _startingVertex = targetVertex; ///

          startingVertices.push(_startingVertex);
        }
      }
    });

    startingVerticesLength = startingVertices.length;
  };

  while (startingVerticesLength > 0) {
    _loop();
  }

  var edgesLength = edges.length;

  if (edgesLength > 0) {
    topologicallySortedVertices = null;
  }

  return topologicallySortedVertices;
}

function startingVerticesFromVertexMap(vertexMap) {
  var vertexNames = Object.keys(vertexMap),
      startingVertices = vertexNames.reduce(function (startingVertices, vertexName) {
    var vertex = vertexMap[vertexName],
        vertexStarting = vertex.isStarting();

    if (vertexStarting) {
      var _startingVertex2 = vertex; ///

      startingVertices.push(_startingVertex2);
    }

    return startingVertices;
  }, []);

  return startingVertices;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,