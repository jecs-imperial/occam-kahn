'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Edge = require('./graph/edge'),
    Vertex = require('./graph/vertex'),
    arrayUtil = require('./util/array');

var Graph = function () {
  function Graph(sortedVertices) {
    _classCallCheck(this, Graph);

    this.sortedVertices = sortedVertices;
  }

  _createClass(Graph, [{
    key: 'getSortedVertices',
    value: function getSortedVertices() {
      return this.sortedVertices;
    }
  }], [{
    key: 'fromVertexLiterals',
    value: function fromVertexLiterals(vertexLiterals) {
      var vertices = [],
          edges = [];

      verticesAndEdgesFromVertexLiterals(vertexLiterals, vertices, edges);

      var sortedVertices = sortedVerticesFromVerticesAndEdges(vertices, edges);

      addAncestorVerticesToSortedVertices(sortedVertices);

      var graph = new Graph(sortedVertices);

      return graph;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

function verticesAndEdgesFromVertexLiterals(vertexLiterals, vertices, edges) {
  var vertexMap = {};

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = arrayUtil.first(vertexLiteral),
        secondVertexLiteralElement = arrayUtil.second(vertexLiteral),
        descendantVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    var vertex = void 0;

    var vertexExists = vertexMap.hasOwnProperty(vertexName);

    if (vertexExists) {
      vertex = vertexMap[vertexName];
    } else {
      vertex = Vertex.fromVertexName(vertexName);

      vertexMap[vertexName] = vertex;

      vertices.push(vertex);
    }

    descendantVertexNames.forEach(function (descendantVertexName) {
      var descendantVertex = void 0;

      var descendantVertexExists = vertexMap.hasOwnProperty(descendantVertexName);

      if (descendantVertexExists) {
        descendantVertex = vertexMap[descendantVertexName];
      } else {
        descendantVertex = Vertex.fromVertexName(descendantVertexName);

        vertexMap[descendantVertexName] = descendantVertex;

        vertices.push(descendantVertex);
      }

      var firstVertex = vertex,
          secondVertex = descendantVertex,
          edge = new Edge(firstVertex, secondVertex);

      edges.push(edge);

      var incomingEdge = edge,
          ///
      outgoingEdge = edge; ///

      descendantVertex.addIncomingEdge(incomingEdge);

      vertex.addOutgoingEdge(outgoingEdge);
    });
  });
}

function sortedVerticesFromVerticesAndEdges(vertices, edges) {
  var sortedVertices = [];

  var startingVertices = vertices.filter(function (vertex) {
    var vertexStarting = vertex.isStarting();

    return vertexStarting;
  });

  var startingVerticesLength = startingVertices.length;

  var _loop = function _loop() {
    var startingVertex = startingVertices.pop(),
        sortedVertex = startingVertex; ///

    sortedVertices.push(sortedVertex);

    arrayUtil.backwardsForEach(edges, function (edge, index) {
      var firstVertex = edge.getFirstVertex(),
          edgeStarting = firstVertex === startingVertex;

      if (edgeStarting) {
        edges.splice(index, 1);

        var lastVertex = edge.getLastVertex(),
            incomingEdge = edge; ///

        lastVertex.removeIncomingEdge(incomingEdge);

        var lastVertexStarting = lastVertex.isStarting();

        if (lastVertexStarting) {
          startingVertices.push(lastVertex);
        }
      }
    });

    startingVerticesLength = startingVertices.length;
  };

  while (startingVerticesLength > 0) {
    _loop();
  }

  var edgesLength = edges.length;

  if (edgesLength > 0) {
    sortedVertices = null;
  }

  return sortedVertices;
}

function addAncestorVerticesToSortedVertices(sortedVertices) {
  if (sortedVertices !== null) {
    sortedVertices.forEach(function (sortedVertex) {
      sortedVertex.forEachOutgoingEdge(function (outgoingEdge) {
        var outgoingEdgeLastVertex = outgoingEdge.getLastVertex(),
            descendantVertex = outgoingEdgeLastVertex,
            ///
        ancestorVertex = sortedVertex,
            ///
        ancestorVertices = ancestorVertex.getAncestorVertices(); ///

        descendantVertex.addAncestorVertices(ancestorVertices);

        descendantVertex.addAncestorVertex(ancestorVertex);
      });
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,